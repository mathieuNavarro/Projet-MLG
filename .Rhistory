hatm2=12
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
erreur
hatm2=3
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
erreur
hatm2=3
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=sum(abs(erreur))
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=sum(abs(erreur))
erreur
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
RMSE
hatm2=12
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
RMSE
hatm2=48
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
RMSE
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(rsample)
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(rsample)
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(dplyr)
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(dplyr)
data=as.data.frame(X)
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(dplyr)
data=as.data.frame(X)
data_train=sample_frac(data,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
data_test=anti_join(X,data_train)
n=49
mmax = 100
Dmax = 2*mmax+1
p=193
t = seq(0,1,length.out = p)
phiX = matrix(NA,n,Dmax) # matrice contenant <X_i,phi_k>
phi = matrix(1,Dmax,p) # matrice contenant phi_k(t_l)
phiX[,1] = rowMeans(X)
for (j in 1:mmax){
phiX[,2*j] = (sqrt(2)/p)*X%*%cos(2*pi*j*t)
phiX[,2*j+1] = (sqrt(2)/p)*X%*%sin(2*pi*j*t)
phi[2*j,] = sqrt(2)*cos(2*pi*j*t)
phi[2*j+1,] = sqrt(2)*sin(2*pi*j*t)
}
G = crossprod(phiX)/n
hatb = crossprod(phiX,Y1)/n
kappa = 30
gamma = rep(0,10)
for (m in 1:10){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:10)/n),col='orange',type='l')
hatm2=48
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
hatm2=3
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
p = 400
x = matrix(0,p,p)
x[150:250,150:250] = 1
grid = seq(0,1,length=p)
image(grid,grid,x,main='Image originale')
image(grid,grid,y,main='Image dégradée')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages(OpenImageR)
install.packages("OpenImageR)
install.packages("OpenImageR")
install.packages("OpenImageR")
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages('tiff')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
h<- matrix(1, 10, 10) / 100
library(tiff)
h<- matrix(1, 10, 10) / 100
y = convolution(x,h)
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages('tiff')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages('tiff')
install.packages('tiff')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
y = convolution(x,h)
image(grid,grid,y,main='Image dégradée')
install.packages(‘RcppArmadillo’)
install.packages(‘RcppArmadillo’)
install.packages("RcppArmadillo")
# ajout d'un bruit blanc
sigma2 = 0.01
y = convolution(x,h) + matrix(rnorm(p^2,0,sqrt(sigma2)),p,p)
image(grid,grid,y,main="Image dégradée et bruitée")
matrix(1, 10, 10) / 100
hatY = fft(y)
h<- matrix(0, p,p)
h[1:10,1:10]  = 1/100
H = fft(h)
hatx = fft(hatY/H,inverse=T)
hatx[1:3,1:3]
hatY/H
landa=5
hat2x=fft((hatY*H-landa)/H**2)
hat2x
lambda1 = sigma2*p^2/sum(Mod(H1)^2)
faithful_plot <-
faithful %>%
ggplot() + aes(x = eruptions, y = waiting) +
geom_point(size=2, colour="purple") +
ylab("Waiting time to next eruption (mn)") + xlab("duration of the eruption (mn)")
#tidyverse:::tidyverse_conflicts()
library(tidyverse)
library(parallel)
library(ggfortify) # extend some ggplot2 features
library(broom)
library(reshape2) # melt function
library(cowplot)
library(parallel) # mclapply function
library(Metrics)
library(rsample)
theme_set(theme_bw())
# require(purrr)  # for map(), reduce()
faithful_plot <-
faithful %>%
ggplot() + aes(x = eruptions, y = waiting) +
geom_point(size=2, colour="purple") +
ylab("Waiting time to next eruption (mn)") + xlab("duration of the eruption (mn)")
faithful_plot
data=faithful
View(data)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
setwd("~/Desktop/Projet MLG/Projet-MLG")
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
nlm1b <- nls(y ~  A * abs(x+b)+c, train, start = c(A=1, b=1, c=1))
nlm1b <- nls(score ~  A * abs(x+b)+c, train, start = c(A=1, b=1, c=1))
data2<-train$score
data2$score<-train$score
data2$duree<-train$duree
View(data2)
data2<-as.data.frame(train$score)
data2$duree<-train$duree
nlm1b <- nls(score ~  A * abs(x+b)+c, data2, start = c(A=1, b=1, c=1))
View(data2)
nlm1b <- nls(train$score ~  A * abs(x+b)+c, data2, start = c(A=1, b=1, c=1))
View(data2)
nlm1b <- nls(train$score ~  A * abs(duree+b)+c, data2, start = c(A=1, b=1, c=1))
nlm1b <- nls(y ~  A * abs(x+b)+c, data2, start = c(A=1, b=1, c=1))
nlm1b <- nls(data2$`train$score` ~  A * abs(x+b)+c, data2, start = c(A=1, b=1, c=1))
nlm1b <- nls(data2$`train$score` ~  A * abs(x+b)+c, data2, start = c(A=10, b=10, c=10))
nlm1b <- nls(data2$`train$score` ~  (A *x+b)*(x>c)+(A2*x+b2)*(x<c), data2, start = c(A=10, b=10, c=10,A2=10,b2=10))
plot(data2$duree,data2$`train$score`)
selected=c(1,5,27,38,40,17)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score)) + facet_wrap(~ sujet, ncol=2)
train$duree=round(train$duree)
patients<-aggregate(train[c("sujet","age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(train$duree,train$sujet), FUN = mean)
patients$sujet=patients$Group.2
patients$duree=patients$Group.1
patients=subset(patients,select=-Group.1)
patients=subset(patients,select=-Group.2)
selected=c(1,5,27,38,40,17)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score)) + facet_wrap(~ sujet, ncol=2)
train$duree=round(train$duree)
patients<-aggregate(train[c("sujet","age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(train$duree,train$sujet), FUN = mean)
patients$sujet=patients$Group.2
patients$duree=patients$Group.1
patients=subset(patients,select=-Group.1)
patients=subset(patients,select=-Group.2)
selected=c(17)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score)) + facet_wrap(~ sujet, ncol=2)
nlm1b <- nls(data2$`train$score` ~  (A *x+b)*(x>c)+(A2*x+b2)*(x<c), data2, start = c(A=0.15, b=20, c=1000,A2=0.15,b2=30))
nlm1b <- nls(data2$`train$score` ~  (A *x+b)*(x>c)+(A2*x+b2)*(x<c), data2, start = c(A=0.15, b=20, c=100,A2=0.15,b2=30))
(data2$`train$score` ~  (A *x+b)*(x>c)+(A2*x+b2)*(x<c), data2, start = c(A=0.15, b=20, c=100,A2=0.15,b2=30), algorithm = "port")
(data2$`train$score` ~  (A *x+b)*(x>c)+(A2*x+b2)*(x<c), data2, start = c(A=0.15, b=20, c=100,A2=0.15,b2=30), algorithm = "port")
nlm1b <- nls(data2$`train$score` ~  (A *x+b)*(x>c)+(A2*x+b2)*(x<c) data2, start = c(A=0.15, b=20, c=100,A2=0.15,b2=30), algorithm = "port")
nlm1b <- nls(data2$`train$score` ~  (A *x+b)*(x>c)+(A2*x+b2)*(x<c), data=data2, start = c(A=0.15, b=20, c=100,A2=0.15,b2=30), algorithm = "port")
selected=1:42
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score)) + facet_wrap(~ sujet, ncol=2)
selected=1:42
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score)) + facet_wrap(~ sujet, ncol=4)
selected=1:42
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score)) + facet_wrap(~ sujet, ncol=8)
nlm1b <- nls(data2$`train$score` ~  a*x^2+b*x+c, data=data2, start = c(a=1,b=1,c=1), algorithm = "port")
Rmse_1<-rbind.data.frame(Train=rmse(predict(nlm1b,train),train$score),Test=rmse(predict(nlm1b,valid),valid$score))
Rmse_1<-rbind.data.frame(Train=rmse(predict(nlm1b,data2),data2$`train$score`))
predict(nlm1b,data2)
Rmse_1<-rmse(predict(nlm1b,data2),data2$`train$score`)
View(nlm1b)
coeff(nlmb1)
coeff(nlm1b)
coef(nlm1b)
testX<-read.csv('test_X_maladie.csv', header = T, sep = ",",dec=".")
View(testX)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
testX<-read.csv('test_X_maladie.csv', header = T, sep = ",",dec=".")
View(train)
selected=c(3,7,11,17,21,31,32,41)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score)) + facet_wrap(~ sujet, ncol=2)
selected=c(3,7,11,17,21,31,32,41)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = BTC2, y = score)) + facet_wrap(~ sujet, ncol=2)
selected=c(3,7,11,17,21,31,32,41)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = BTC1, y = score)) + facet_wrap(~ sujet, ncol=2)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = BTC1)) + facet_wrap(~ sujet, ncol=2)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = BTC2)) + facet_wrap(~ sujet, ncol=2)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = CDNL)) + facet_wrap(~ sujet, ncol=2)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = EFS)) + facet_wrap(~ sujet, ncol=2)
selected=c(3,7,11,17,21,31,32,41)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = VFNL)) + facet_wrap(~ sujet, ncol=2)
troisieme_quartile <- quantile(train$duree, 0.75)
valid=train[train$duree>105]
valid=train[train$duree>105]
valid=train[train$duree>105,]
train=train[train$duree<=105,]
Y_train=train$score
X_train=subset(train,select=-score)
Y_test=valid$score
X_test=subset(valid,select=-score)
xgb_trcontrol = trainControl(method = "cv", number = 5, allowParallel = TRUE,
verboseIter = FALSE, returnData = FALSE)
library(xgboost)
library(caret)
library(readxl)
Y_train=train$score
X_train=subset(train,select=-score)
Y_test=valid$score
X_test=subset(valid,select=-score)
xgb_trcontrol = trainControl(method = "cv", number = 5, allowParallel = TRUE,
verboseIter = FALSE, returnData = FALSE)
xgbGrid <- expand.grid(nrounds = c(100,200),
max_depth = c(3, 5, 10, 15, 20),
colsample_bytree = seq(0.5, 0.9, length.out = 5),
## valeurs par défaut :
eta = 0.1,
gamma=0,
min_child_weight = 1,
subsample=1
)
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
method = "xgbTree")
xgb_model$bestTune
predicted = predict(xgb_model, X_test)
residuals = Y_test - predicted
RMSE = sqrt(mean(residuals^2))
genre=train$genre
sujet=train$sujet
score=train$score
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=subset(train,select=-score)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
train$score=score
genre=valid$genre
sujet=valid$sujet
score=valid$score
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
library(tidyverse)
library(lme4) # lmer(): To fit mixed-model
library(lmerTest) # lmer (): To fit mixed-model and diplay p-values
library(nlme) # To fit mixed-model
library(lattice) # To plot mixed-model
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
#TROP GROS MODELE NE CONVERGE PAS
mod7=lmer(score ~ age +genre+duree +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
mod8=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE8= rmse(valid$score,predict(mod8, newdata = valid))
mod9=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +CDNL+(AV.dB|  sujet), data = train, REML = FALSE)
RMSE9= rmse(valid$score,predict(mod9, newdata = valid))
mod10=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train)
RMSE10= rmse(valid$score,predict(mod10, newdata = valid))
m10update<-update(mod10, REML=FALSE)
RMSE10_UPDATE= rmse(valid$score,predict(m10update, newdata = valid))
sort(as.matrix(AIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
sort(as.matrix(BIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
valid$pred_mod_m1 <- fitted(mod7)
valid$pred_mod_m1 <- predict(mod7,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod7)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
testX<-read.csv('test_X_maladie.csv', header = T, sep = ",",dec=".")
troisieme_quartile <- quantile(train$duree, 0.75)
valid=train[train$duree>105,]
train=train[train$duree<=105,]
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
#TROP GROS MODELE NE CONVERGE PAS
mod7=lmer(score ~ age +genre+duree +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
mod8=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE8= rmse(valid$score,predict(mod8, newdata = valid))
mod9=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +CDNL+(AV.dB|  sujet), data = train, REML = FALSE)
RMSE9= rmse(valid$score,predict(mod9, newdata = valid))
mod10=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train)
RMSE10= rmse(valid$score,predict(mod10, newdata = valid))
m10update<-update(mod10, REML=FALSE)
RMSE10_UPDATE= rmse(valid$score,predict(m10update, newdata = valid))
sort(as.matrix(AIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
sort(as.matrix(BIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
valid$pred_mod_m1 <- predict(mod7,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod7)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
mod7=lmer(score ~ age +genre+duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
valid$pred_mod_m1 <- predict(mod7,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod7)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
mod10=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +AV.dB +(1|  sujet), data = train)
RMSE10= rmse(valid$score,predict(mod10, newdata = valid))
genre=train$genre
sujet=train$sujet
score=train$score
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=subset(train,select=-score)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
train$score=score
genre=valid$genre
sujet=valid$sujet
score=valid$score
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
mod10=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +AV.dB +(1|  sujet), data = train)
RMSE10= rmse(valid$score,predict(mod10, newdata = valid))
pred_mod_m1=predict(xgb_model,X_train)
X_train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
set.seed(2023)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
troisieme_quartile <- quantile(train$duree, 0.75)
valid=train[train$duree>105,]
train=train[train$duree<=105,]
Y_train=train$score
X_train=subset(train,select=-score)
Y_test=valid$score
X_test=subset(valid,select=-score)
pred_mod_m1=predict(xgb_model,X_train)
X_train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
X_train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_prod_m1=pred_mod_m1
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
View(train)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
plot(train$duree,train$pred_prod_m1)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_point(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_prod_m1=pred_mod_m1
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_point(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_prod_m1=pred_mod_m1
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
rlang::last_trace()
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod7)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
pred_mod_m1=predict(xgb_model,X_train)
train$pred_mod_m1=pred_mod_m1
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
valid$pred_mod_m1=predicted
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
predicted = predict(xgb_model, X_test)
valid$pred_mod_m1=predicted
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
valid$pred_mod_m1 <- predict(mod7,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
pred_mod_m1=predict(xgb_model,X_train)
train$pred_mod_m1=pred_mod_m1
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
valid$pred_mod_m1=predicted
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
