y = convolution(x,h)
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages('tiff')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages('tiff')
install.packages('tiff')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
y = convolution(x,h)
image(grid,grid,y,main='Image dégradée')
install.packages(‘RcppArmadillo’)
install.packages(‘RcppArmadillo’)
install.packages("RcppArmadillo")
# ajout d'un bruit blanc
sigma2 = 0.01
y = convolution(x,h) + matrix(rnorm(p^2,0,sqrt(sigma2)),p,p)
image(grid,grid,y,main="Image dégradée et bruitée")
matrix(1, 10, 10) / 100
hatY = fft(y)
h<- matrix(0, p,p)
h[1:10,1:10]  = 1/100
H = fft(h)
hatx = fft(hatY/H,inverse=T)
hatx[1:3,1:3]
hatY/H
landa=5
hat2x=fft((hatY*H-landa)/H**2)
hat2x
lambda1 = sigma2*p^2/sum(Mod(H1)^2)
rm(list=ls())
library(tidyverse)
library(lme4) # lmer(): To fit mixed-model
library(lmerTest) # lmer (): To fit mixed-model and diplay p-values
library(nlme) # To fit mixed-model
library(lattice) # To plot mixed-model
library(nlme)
library(plotly)
library(ggplot2)
library(Metrics)
library(gridExtra)
library(dplyr)
library(MASS)
library(Matrix)
library(tidyverse)
library(xgboost)
library(caret)
library(readxl)
set.seed(2023)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
setwd("~/Desktop/Projet MLG/Projet-MLG")
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
genre=train$genre
sujet=train$sujet
score=train$score
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=subset(train,select=-score)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
train$score=score
genre=valid$genre
sujet=valid$sujet
score=valid$score
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
#TROP GROS MODELE NE CONVERGE PAS
mod7=lmer(score ~ age +genre+duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet:duree), data = train, REML = FALSE)
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
#TROP GROS MODELE NE CONVERGE PAS
mod7=lmer(score ~ age +genre+duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet:duree), data = train, REML = FALSE)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
train$duree=round(train$duree)
View(train)
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
genre=train$genre
sujet=train$sujet
score=train$score
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=subset(train,select=-score)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
train$score=score
genre=valid$genre
sujet=valid$sujet
score=valid$score
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
View(train)
mod7=lmer(score ~ age +genre+duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet:duree), data = train, REML = FALSE)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
for (i in 1:42){
patient<-train %>% filter(sujet ==i)
patient$duree=round(patient$duree)
patient <- aggregate(patient[c("age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(patient$duree), FUN = mean)
names(patient)[names(patient) == "Group.1"] <- "duree"
coeff_directeur <- numeric(0)
for (j in 1:(length(patient$duree)-1)) {
coeff_directeur <- c(coeff_directeur, (patient$score[j+1] - patient$score[j]) / (patient$duree[j+1] - patient$duree[j]))
}
variations=abs(diff(coeff_directeur))
indice_max_variation_patient <- which.max(variations)
moment_inflexion[i]=patient$duree[indice_max_variation_patient]
}
moment_inflexion=numeric(42)
for (i in 1:42){
patient<-train %>% filter(sujet ==i)
patient$duree=round(patient$duree)
patient <- aggregate(patient[c("age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(patient$duree), FUN = mean)
names(patient)[names(patient) == "Group.1"] <- "duree"
coeff_directeur <- numeric(0)
for (j in 1:(length(patient$duree)-1)) {
coeff_directeur <- c(coeff_directeur, (patient$score[j+1] - patient$score[j]) / (patient$duree[j+1] - patient$duree[j]))
}
variations=abs(diff(coeff_directeur))
indice_max_variation_patient <- which.max(variations)
moment_inflexion[i]=patient$duree[indice_max_variation_patient]
}
train2<-train
train2 <- train2 %>%
group_by(sujet) %>%
mutate(inflexion = moment_inflexion[sujet]) %>%
ungroup()
train2$inflx=(train2$duree>train2$inflexion)
train2=subset(train2,select=-inflexion)
train2$inflx=as.numeric(train2$inflx)
troisieme_quartile <- quantile(train2$duree, 0.75)
valid=train2[train2$duree>105,]
train=train2[train2$duree<=105,]
genre=train$genre
sujet=train$sujet
score=train$score
inflx=train$inflx
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=subset(train,select=-score)
train=subset(train,select=-inflx)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
train$score=score
train$inflx=inflx
genre=valid$genre
sujet=valid$sujet
score=valid$score
inflx=valid$inflx
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=subset(valid,select=-inflx)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
valid$inflx=inflx
mod_fin=lmer(score ~ age +genre+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet:inflx), data = train, REML = FALSE)
RMSE_fin= rmse(valid$score,predict(mod_fin, newdata = valid))
View(train2)
train2 <- train2 %>%
group_by(sujet) %>%
mutate(quantile_70 = quantile(duree, 0.7)) %>%
ungroup() %>%
mutate(dataset = ifelse(duree <= quantile_70, "train", "test"))
View(train2)
train <- train2[train2$dataset == "train", ]
valid <- train2[train2$dataset == "test", ]
train<- select(train, -c(dataset,quantile_70))
train<- subset(train, select=-c(dataset,quantile_70))
valid <- subset(valid, select=-c(dataset,quantile_70))
View(train)
genre=train$genre
sujet=train$sujet
score=train$score
inflx=train$inflx
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=subset(train,select=-score)
train=subset(train,select=-inflx)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
train$score=score
train$inflx=inflx
genre=valid$genre
sujet=valid$sujet
score=valid$score
inflx=valid$inflx
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=subset(valid,select=-inflx)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
valid$inflx=inflx
mod_fin=lmer(score ~ age +genre+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet:inflx), data = train, REML = FALSE)
RMSE_fin= rmse(valid$score,predict(mod_fin, newdata = valid))
AIC(mod_fin)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
moment_inflexion=numeric(42)
for (i in 1:42){
patient<-train %>% filter(sujet ==i)
patient$duree=round(patient$duree)
patient <- aggregate(patient[c("age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(patient$duree), FUN = mean)
names(patient)[names(patient) == "Group.1"] <- "duree"
coeff_directeur <- numeric(0)
for (j in 1:(length(patient$duree)-1)) {
coeff_directeur <- c(coeff_directeur, (patient$score[j+1] - patient$score[j]) / (patient$duree[j+1] - patient$duree[j]))
}
variations=abs(diff(coeff_directeur))
indice_max_variation_patient <- which.max(variations)
moment_inflexion[i]=patient$duree[indice_max_variation_patient]
}
train2<-train
train2 <- train2 %>%
group_by(sujet) %>%
mutate(inflexion = moment_inflexion[sujet]) %>%
ungroup()
train2$inflx=(train2$duree>train2$inflexion)
train2=subset(train2,select=-inflexion)
train2$inflx=as.numeric(train2$inflx)
mydata_split <- initial_split(train2, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
genre=train$genre
sujet=train$sujet
score=train$score
inflx=train$inflx
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=subset(train,select=-score)
train=subset(train,select=-inflx)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
train$score=score
train$inflx=inflx
genre=valid$genre
sujet=valid$sujet
score=valid$score
inflx=valid$inflx
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=subset(valid,select=-inflx)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
valid$inflx=inflx
mod_fin=lmer(score ~ age +genre+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet:inflx), data = train, REML = FALSE)
RMSE_fin= rmse(valid$score,predict(mod_fin, newdata = valid))
valid$pred_mod_m1 <- predict(mod_fin,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
selected=c(3,7,11,17,21,31,32,41)
valid$pred_mod_m1 <- predict(mod_fin,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod_fin)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
AIC(mod_fin)
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
#TROP GROS MODELE NE CONVERGE PAS
mod7=lmer(score ~ age +genre+duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet:duree), data = train, REML = FALSE)
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
#TROP GROS MODELE NE CONVERGE PAS
mod7=lmer(score ~ age +genre+duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
mod8=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE8= rmse(valid$score,predict(mod8, newdata = valid))
mod9=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +CDNL+(AV.dB|  sujet), data = train, REML = FALSE)
RMSE9= rmse(valid$score,predict(mod9, newdata = valid))
mod10=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +AV.dB +(1|  sujet), data = train)
RMSE10= rmse(valid$score,predict(mod10, newdata = valid))
m10update<-update(mod10, REML=FALSE)
RMSE10_UPDATE= rmse(valid$score,predict(m10update, newdata = valid))
sort(as.matrix(AIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update,mod_fin))[,2])%>%data.frame()%>% rmarkdown::paged_table()
sort(as.matrix(BIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update,mod_fin))[,2])%>%data.frame()%>% rmarkdown::paged_table()
View(train)
mod7=lmer(score ~ age +genre+duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
library(tidyverse)
library(lme4) # lmer(): To fit mixed-model
library(lmerTest) # lmer (): To fit mixed-model and diplay p-values
library(nlme) # To fit mixed-model
library(lattice) # To plot mixed-model
library(nlme)
library(plotly)
library(ggplot2)
library(Metrics)
library(gridExtra)
library(dplyr)
library(MASS)
library(Matrix)
library(tidyverse)
library(xgboost)
library(caret)
library(readxl)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
mod7=lmer(score ~ age +genre+duree:inflexion+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
mod7=lmer(score ~ age +genre+duree:inflx+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
mod7=lmer(score ~ age +genre+duree:inflx+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree:inflx+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod7)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
mod_fin=lmer(score ~ age +genre+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet:inflx), data = train, REML = FALSE)
RMSE_fin= rmse(valid$score,predict(mod_fin, newdata = valid))
valid$pred_mod_m1 <- predict(mod_fin,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod_fin)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
valid$pred_mod_m1 <- predict(mod7,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod7)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
valid$pred_mod_m1 <- predict(mod7,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod7)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
mod7=lmer(score ~ age +genre+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree*inflx+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
valid$pred_mod_m1 <- predict(mod7,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
train$pred_mod_m1 <- fitted(mod7)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
troisieme_quartile <- quantile(train$duree, 0.75)
valid=train[train$duree>105,]
train=train[train$duree<=105,]
mod7=lmer(score ~ age +genre+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree*inflx+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
moment_inflexion=numeric(42)
for (i in 1:42){
patient<-train %>% filter(sujet ==i)
patient$duree=round(patient$duree)
patient <- aggregate(patient[c("age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(patient$duree), FUN = mean)
names(patient)[names(patient) == "Group.1"] <- "duree"
coeff_directeur <- numeric(0)
for (j in 1:(length(patient$duree)-1)) {
coeff_directeur <- c(coeff_directeur, (patient$score[j+1] - patient$score[j]) / (patient$duree[j+1] - patient$duree[j]))
}
variations=abs(diff(coeff_directeur))
indice_max_variation_patient <- which.max(variations)
moment_inflexion[i]=patient$duree[indice_max_variation_patient]
}
train2<-train
train2 <- train2 %>%
group_by(sujet) %>%
mutate(inflexion = moment_inflexion[sujet]) %>%
ungroup()
train2$inflx=(train2$duree>train2$inflexion)
train2=subset(train2,select=-inflexion)
train2$inflx=as.numeric(train2$inflx)
troisieme_quartile <- quantile(train2$duree, 0.75)
valid=train2[train2$duree>105,]
train=train2[train2$duree<=105,]
genre=train$genre
sujet=train$sujet
score=train$score
inflx=train$inflx
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=subset(train,select=-score)
train=subset(train,select=-inflx)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
train$score=score
train$inflx=inflx
genre=valid$genre
sujet=valid$sujet
score=valid$score
inflx=valid$inflx
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=subset(valid,select=-inflx)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
valid$inflx=inflx
mod7=lmer(score ~ age +genre+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree*inflx+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
train$pred_mod_m1 <- fitted(mod7)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
valid$pred_mod_m1 <- predict(mod7,newdata=valid)
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
Y_train=train$score
X_train=subset(train,select=-score)
Y_test=valid$score
X_test=subset(valid,select=-score)
xgb_trcontrol = trainControl(method = "cv", number = 5, allowParallel = TRUE,
verboseIter = FALSE, returnData = FALSE)
xgbGrid <- expand.grid(nrounds = c(100,200),
max_depth = c(3, 5, 10, 15, 20),
colsample_bytree = seq(0.5, 0.9, length.out = 5),
## valeurs par défaut :
eta = 0.1,
gamma=0,
min_child_weight = 1,
subsample=1
)
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
method = "xgbTree")
xgb_model$bestTune
predicted = predict(xgb_model, X_test)
residuals = Y_test - predicted
RMSE = sqrt(mean(residuals^2))
pred_mod_m1=predict(xgb_model,X_train)
train$pred_mod_m1=pred_mod_m1
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
valid$pred_mod_m1=predicted
valid %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score), color="red", size=3) +
geom_line(aes(x = duree, y = pred_mod_m1)) + facet_wrap(~ sujet, ncol=4)
mod_fin=lmer(score ~ age +genre+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL +(duree+FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet:inflx), data = train, REML = FALSE)
RMSE_fin= rmse(valid$score,predict(mod_fin, newdata = valid))
