h[1:10,1:10]  = 1/100
H = fft(h)
hatx = fft(hatY/H,inverse=T)
hatx[1:3,1:3]
hatY/H
landa=5
hat2x=fft((hatY*H-landa)/H**2)
hat2x
lambda1 = sigma2*p^2/sum(Mod(H1)^2)
rm(list=ls())
library(tidyverse)
library(lme4) # lmer(): To fit mixed-model
library(lmerTest) # lmer (): To fit mixed-model and diplay p-values
library(nlme) # To fit mixed-model
library(lattice) # To plot mixed-model
library(nlme)
library(plotly)
library(ggplot2)
library(Metrics)
library(gridExtra)
library(dplyr)
library(MASS)
library(Matrix)
theme_set(theme_bw())
set.seed(2023)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
setwd("~/Desktop/Projet MLG/Projet-MLG")
rm(list=ls())
library(tidyverse)
library(lme4) # lmer(): To fit mixed-model
library(lmerTest) # lmer (): To fit mixed-model and diplay p-values
library(nlme) # To fit mixed-model
library(lattice) # To plot mixed-model
library(nlme)
library(plotly)
library(ggplot2)
library(Metrics)
library(gridExtra)
library(dplyr)
library(MASS)
library(Matrix)
theme_set(theme_bw())
set.seed(2023)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
testX<-read.csv('test_X_maladie.csv', header = T, sep = ",",dec=".")
library(tidyverse)
library(xgboost)
install.packages("xgboost")
library(tidyverse)
library(xgboost)
library(caret)
library(readxl)
mydata_split <- initial_split(train, prop = .7)
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
X_train = xgb.DMatrix(as.matrix(train %>% select(-score)))
View(train)
X_train=train %>% select(-score)
Y_train=train$score
X_train = xgb.DMatrix(as.matrix(train %>% select=-score))
X_train=subset(train,select=-genre)
X_train = xgb.DMatrix(as.matrix(X_train))
xgb_trcontrol = trainControl(method = "cv", number = 5, allowParallel = TRUE,
verboseIter = FALSE, returnData = FALSE)
xgbGrid <- expand.grid(nrounds = c(100,200),
max_depth = c(3, 5, 10, 15, 20),
colsample_bytree = seq(0.5, 0.9, length.out = 5),
## valeurs par défaut :
eta = 0.1,
gamma=0,
min_child_weight = 1,
subsample = 1
)
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
method = "xgbTree")
your_params_here <- list(
objective = "reg:squarederror",  # ou "reg:linear" pour la régression
booster = "gbtree",
eta = 0.3,  # Taux d'apprentissage
gamma = 0,  # Valeur seuil pour la division d'un nœud
max_depth = 6,  # Profondeur maximale d'un arbre
min_child_weight = 1,  # Poids minimum nécessaire pour créer un nouveau nœud dans l'arbre
subsample = 1,  # Fraction d'échantillons utilisée pour ajuster les arbres
colsample_bytree = 1,  # Fraction de colonnes utilisée par arbre
nrounds = 100  # Nombre d'itérations
)
xgb_model = xgb.train(data = as.matrix(X_train), label = Y_train, params = your_params_here)
X_train=subset(train,select=-genre)
X_train <- as.matrix(X_train)
your_params_here <- list(
objective = "reg:squarederror",  # ou "reg:linear" pour la régression
booster = "gbtree",
eta = 0.3,  # Taux d'apprentissage
gamma = 0,  # Valeur seuil pour la division d'un nœud
max_depth = 6,  # Profondeur maximale d'un arbre
min_child_weight = 1,  # Poids minimum nécessaire pour créer un nouveau nœud dans l'arbre
subsample = 1,  # Fraction d'échantillons utilisée pour ajuster les arbres
colsample_bytree = 1,  # Fraction de colonnes utilisée par arbre
nrounds = 100  # Nombre d'itérations
)
xgb_model = xgb.train(data = as.matrix(X_train), label = Y_train, params = your_params_here)
X_train = xgb.DMatrix(as.matrix(X_train))
xgb_model = xgb.train(data = X_train, label = Y_train, params = your_params_here)
your_params_here <- list(
objective = "reg:squarederror",  # ou "reg:linear" pour la régression
booster = "gbtree",
eta = 0.3,  # Taux d'apprentissage
gamma = 0,  # Valeur seuil pour la division d'un nœud
max_depth = 6,  # Profondeur maximale d'un arbre
min_child_weight = 1,  # Poids minimum nécessaire pour créer un nouveau nœud dans l'arbre
subsample = 1,  # Fraction d'échantillons utilisée pour ajuster les arbres
colsample_bytree = 1,  # Fraction de colonnes utilisée par arbre
nrounds = 100  # Nombre d'itérations
)
xgb_model = xgb.train(data = X_train, label = Y_train, params = your_params_here)
xgb_model = xgb.train(data = X_train, label = Y_train, params = your_params_here,nround=100)
your_params_here <- list(objective = "reg:squarederror", nrounds = 100)
xgb_model <- xgb.train(data = X_train_matrix, label = Y_train, params = your_params_here)
your_params_here <- list(objective = "reg:squarederror", nrounds = 100)
xgb_model <- xgb.train(data = X_train, label = Y_train, params = your_params_here)
xgb_model <- xgb.train(data = X_train, label = Y_train, objective = "reg:squarederror", nrounds = 100)
xgb_model <- xgb.train(data = X_train, label = as.matrix(Y_train), objective = "reg:squarederror", nrounds = 100)
Y_train=as.vector(Y_train)
Y_train=as.matrix(Y_train)
xgb_model <- xgb.train(data = X_train, label = as.matrix(Y_train), objective = "reg:squarederror", nrounds = 100)
Y_train= xgb.DMatrix(as.matrix(Y_train))
xgb_model <- xgb.train(data = X_train, label = as.matrix(Y_train), objective = "reg:squarederror", nrounds = 100)
xgb_model <- xgb.train(data = X_train, label = Y_train, objective = "reg:squarederror", nrounds = 100)
Y_train=train$score
X_train=subset(train,select=-genre)
X_train$genre=as.factor(X_train$genre)
View(X_train)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
View(train)
Y_train=train$score
X_train=subset(train,select=-score)
X_train$genre=as.factor(X_train$genre)
X_train = xgb.DMatrix(as.matrix(X_train))
View(X_train)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
View(train)
Y_train=train$score
X_train=subset(train,select=-score)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
Y_train=train$score
X_train=subset(train,select=-score)
X_train = xgb.DMatrix(as.matrix(X_train))
Y_train= xgb.DMatrix(as.matrix(Y_train))
xgb_model <- xgb.train(data = X_train, label = Y_train, objective = "reg:squarederror", nrounds = 100)
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
method = "xgbTree")
Y_train=train$score
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
method = "xgbTree")
X_train=subset(train,select=-score)
dmy <- dummyVars(" ~ genre", data = X_train)
View(dmy)
View(dmy)
dmy <- dummyVars(" ~ .", data = X_train, fullRank=T)
X_train<- data.frame(predict(dmy, newdata = X_train))
X_train = xgb.DMatrix(as.matrix(X_train))
xgb_trcontrol = trainControl(method = "cv", number = 5, allowParallel = TRUE,
verboseIter = FALSE, returnData = FALSE)
xgbGrid <- expand.grid(nrounds = c(100,200),
max_depth = c(3, 5, 10, 15, 20),
colsample_bytree = seq(0.5, 0.9, length.out = 5),
## valeurs par défaut :
eta = 0.1,
gamma=0,
min_child_weight = 1,
subsample = 1
)
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
method = "xgbTree")
X_train=subset(train,select=-score)
dmy <- dummyVars(" ~ .", data = X_train, fullRank=T)
X_train<- data.frame(predict(dmy, newdata = X_train))
View(X_train)
X_train=subset(train,select=-score)
encoded_data <- model.matrix(~ genre - 1, data = X_train)
X_train <- cbind(X_train, encoded_data)
X_train=subset(X_train,select=-genre)
X_train = xgb.DMatrix(as.matrix(X_train))
xgb_trcontrol = trainControl(method = "cv", number = 5, allowParallel = TRUE,
verboseIter = FALSE, returnData = FALSE)
xgbGrid <- expand.grid(nrounds = c(100,200),
max_depth = c(3, 5, 10, 15, 20),
colsample_bytree = seq(0.5, 0.9, length.out = 5),
## valeurs par défaut :
eta = 0.1,
gamma=0,
min_child_weight = 1,
subsample = 1
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
xgbGrid <- expand.grid(nrounds = c(100,200),
max_depth = c(3, 5, 10, 15, 20),
colsample_bytree = seq(0.5, 0.9, length.out = 5),
## valeurs par défaut :
eta = 0.1,
gamma=0,
min_child_weight = 1
)
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
method = "xgbTree")
X_train=subset(train,select=-score)
View(X_train)
xgb_trcontrol = trainControl(method = "cv", number = 5, allowParallel = TRUE,
verboseIter = FALSE, returnData = FALSE)
xgbGrid <- expand.grid(nrounds = c(100,200),
max_depth = c(3, 5, 10, 15, 20),
colsample_bytree = seq(0.5, 0.9, length.out = 5),
## valeurs par défaut :
eta = 0.1,
gamma=0,
min_child_weight = 1
)
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
method = "xgbTree")
xgbGrid <- expand.grid(nrounds = c(100,200),
max_depth = c(3, 5, 10, 15, 20),
colsample_bytree = seq(0.5, 0.9, length.out = 5),
## valeurs par défaut :
eta = 0.1,
gamma=0,
min_child_weight = 1,
subsample=1
)
xgb_model = train(X_train, Y_train, trControl = xgb_trcontrol, tuneGrid = xgbGrid,
method = "xgbTree")
xgb_model$bestTune
Y_test=valid$score
X_test=subset(valid,select=-score)
X_test=xgb.DMatrix((as.matrix(X_test)))
predicted = predict(xgb_model, X_test)
Y_test=valid$score
X_test=subset(valid,select=-score)
predicted = predict(xgb_model, X_test)
residuals = Y_test - predicted
RMSE = sqrt(mean(residuals^2))
patient1<-train %>% filter(sujet %in% 1)
View(patient1)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
patient1<-train %>% filter(sujet %in% 1)
patient1$duree=patient1$duree.apply(int)
patient1$duree=patient1$duree.asrtype(int)
patient1$duree=patient1$duree.astype(int)
patient1$duree=round(patient1$duree)
View(patient1)
col(patient1)
summary(patien1)
View(patient1)
resultat <- aggregate(patient1[c("age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(df$duree), FUN = mean)
resultat <- aggregate(patient1[c("age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(patient1$duree), FUN = mean)
View(resultat)
ggplot(data=resultat)  + aes(x = FF, y = score) + geom_point()+geom_smooth()
ggplot(data=resultat)  + aes(x = AV, y = score) + geom_point()+geom_smooth()
ggplot(data=resultat)  + aes(x = FF.Abs, y = score) + geom_point()+geom_smooth()
ggplot(data=patient1)  + aes(x = FF.Abs, y = score) + geom_point()+geom_smooth()
patients<-aggregate(train[c("sujet","age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(train$duree,train$sujet), FUN = mean)
View(patients)
train$duree=round(train$duree)
View(train)
patients<-aggregate(train[c("sujet","age","genre","score","FF","FF.Abs","FF.RAP","FF.PPQ5","FF.DDP","AV","AV.dB","AV.APQ3","AV.APQ5","AV.APQ11","AV.DDA","BTC1","BTC2","CDNL","EFS","VFNL")], by = list(train$duree,train$sujet), FUN = mean)
View(patients)
patients$sujet=patients$Group.2
patients$duree=patients$Group.1
patients=subset(patients,select=-Group.1)
patients=subset(patients,select=-Group.2)
View(patients)
selected=c(1,5,27,38,40,17)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = AV, y = score)) + facet_wrap(~ sujet, ncol=2)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = BTC1, y = score)) + facet_wrap(~ sujet, ncol=2)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = CDNL, y = score)) + facet_wrap(~ sujet, ncol=2)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = EFS, y = score)) + facet_wrap(~ sujet, ncol=2)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = VFNL, y = score)) + facet_wrap(~ sujet, ncol=2)
selected=c(1,5,27,38,40,17)
patients %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = FF.Abs)) + facet_wrap(~ sujet, ncol=2)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = FF.Abs)) + facet_wrap(~ sujet, ncol=2)
ggplot(data = train)+geom_point(aes(x = genre, y = score))
ggplot(data = train)+geom_point(aes(x = genre, y = duree,color=genre))
ggplot(data = train)+geom_point(aes(x = duree, y = score,color=genre))
ggplot(data = train)+geom_point(aes(x = duree, y = score,color=genre))+geom(smooth())
ggplot(data = train)+geom_point(aes(x = duree, y = score,color=genre))+geom_smooth())
ggplot(data = train)+geom_point(aes(x = duree, y = score,color=genre))+geom_smooth()
ggplot(data = train)+geom_point(aes(x = duree, y = score))+geom_smooth()
ggplot(data=resultat)  + aes(x = FF.Abs, y = score) + geom_point()+geom_smooth()
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs (AV.dB|  sujet), data = train, REML = FALSE)
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
testX<-read.csv('test_X_maladie.csv', header = T, sep = ",",dec=".")
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
genre=train$genre
train=subset(train,select=-genre)
train=scale(train)
train$genre=genre
View(train)
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
genre=train$genre
train=subset(train,select=-genre)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod3, newdata = valid))
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
genre=train$genre
sujet=train$sujet
train=subset(train,select=-sujet)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
View(train)
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
genre=valid$genre
sujet=valid$sujet
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod4, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod4, newdata = valid))
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
mod7=lmer(score ~ age +genre+duree +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
mod8=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE8= rmse(valid$score,predict(mod8, newdata = valid))
mod9=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +CDNL+(AV.dB|  sujet), data = train, REML = FALSE)
RMSE9= rmse(valid$score,predict(mod9, newdata = valid))
mod10=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train)
RMSE10= rmse(valid$score,predict(mod10, newdata = valid))
m10update<-update(mod10, REML=FALSE)
RMSE10_UPDATE= rmse(valid$score,predict(m10update, newdata = valid))
c(sigma(m10update),sigma(mod10))
sort(as.matrix(AIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
sort(as.matrix(BIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
anova(mod9,mod10)
anova(mod7,mod6)
mod11=lmer(score ~  genre+duree(1+age|  sujet), data = train)
mod11=lmer(score ~  genre+duree+(1+age|  sujet), data = train)
RMSE11=rmse(valid$score,predict(mod11),newdata=valid)
RMSE11=rmse(valid$score,predict(mod11,newdata=valid))
mod11=lm(score ~., data = train)
RMSE11=rmse(valid$score,predict(mod11,newdata=valid))
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
genre=valid$genre
sujet=valid$sujet
score=valid$score
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
mod7=lmer(score ~ age +genre+duree +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
mod8=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE8= rmse(valid$score,predict(mod8, newdata = valid))
mod9=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +CDNL+(AV.dB|  sujet), data = train, REML = FALSE)
RMSE9= rmse(valid$score,predict(mod9, newdata = valid))
mod10=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train)
RMSE10= rmse(valid$score,predict(mod10, newdata = valid))
m10update<-update(mod10, REML=FALSE)
RMSE10_UPDATE= rmse(valid$score,predict(m10update, newdata = valid))
sort(as.matrix(AIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
sort(as.matrix(BIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
mod11=lm(score ~., data = train)
RMSE11=rmse(valid$score,predict(mod11,newdata=valid))
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
#TROP GROS MODELE NE CONVERGE PAS
mod7=lmer(score ~ age +genre+duree +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
mod8=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE8= rmse(valid$score,predict(mod8, newdata = valid))
mod9=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +CDNL+(AV.dB|  sujet), data = train, REML = FALSE)
RMSE9= rmse(valid$score,predict(mod9, newdata = valid))
mod10=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train)
RMSE10= rmse(valid$score,predict(mod10, newdata = valid))
m10update<-update(mod10, REML=FALSE)
RMSE10_UPDATE= rmse(valid$score,predict(m10update, newdata = valid))
sort(as.matrix(AIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
sort(as.matrix(BIC(mod4,mod5,mod6,mod7,mod8,mod9,mod10,m10update))[,2])%>%data.frame()%>% rmarkdown::paged_table()
mod11=lm(score ~., data = train)
RMSE11=rmse(valid$score,predict(mod11,newdata=valid))
genre=train$genre
sujet=train$sujet
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
genre=valid$genre
sujet=valid$sujet
score=valid$score
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
library(rsample)
mydata_split <- initial_split(train, prop = .7)
train <- training(mydata_split)
valid  <- testing(mydata_split)
genre=train$genre
sujet=train$sujet
score=train$score
train=subset(train,select=-genre)
train=subset(train,select=-sujet)
train=subset(train,select=-score)
train=scale(train)
train=as.data.frame(train)
train$genre=genre
train$sujet=sujet
train$score=score
genre=valid$genre
sujet=valid$sujet
score=valid$score
valid=subset(valid,select=-genre)
valid=subset(valid,select=-sujet)
valid=subset(valid,select=-score)
valid=scale(valid)
valid=as.data.frame(valid)
valid$genre=genre
valid$sujet=sujet
valid$score=score
mod4=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+AV.dB +(FF.Abs|  sujet), data = train, REML = FALSE)
RMSE4= rmse(valid$score,predict(mod4, newdata = valid))
mod5=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train, REML = FALSE)
RMSE5= rmse(valid$score,predict(mod5, newdata = valid))
mod6=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE6= rmse(valid$score,predict(mod6, newdata = valid))
#TROP GROS MODELE NE CONVERGE PAS
mod7=lmer(score ~ age +genre+duree +(FF.Abs+AV.dB+BTC1+BTC2+EFS+VFNL+CDNL|  sujet), data = train, REML = FALSE)
RMSE7= rmse(valid$score,predict(mod7, newdata = valid))
mod8=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL+CDNL +(FF.Abs+AV.dB|  sujet), data = train, REML = FALSE)
RMSE8= rmse(valid$score,predict(mod8, newdata = valid))
mod9=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +CDNL+(AV.dB|  sujet), data = train, REML = FALSE)
RMSE9= rmse(valid$score,predict(mod9, newdata = valid))
mod10=lmer(score ~ age +genre+duree+BTC1+BTC2+EFS+VFNL + FF.Abs +(AV.dB|  sujet), data = train)
RMSE10= rmse(valid$score,predict(mod10, newdata = valid))
m10update<-update(mod10, REML=FALSE)
RMSE10_UPDATE= rmse(valid$score,predict(m10update, newdata = valid))
