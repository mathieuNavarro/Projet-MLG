points(1:ncol(Xnc),X[i,],type='l',col=floor(Ync[i]))
}
Y1 <- Ync-mean(Ync)
mmax = 100
Dmax = 2*mmax+1
phiX = matrix(NA,n,Dmax) # matrice contenant <X_i,phi_k>
phi = matrix(1,Dmax,p) # matrice contenant phi_k(t_l)
mmax = 100
Dmax = 2*mmax+1
p=49
phiX = matrix(NA,n,Dmax) # matrice contenant <X_i,phi_k>
phi = matrix(1,Dmax,p) # matrice contenant phi_k(t_l)
phiX[,1] = rowMeans(X)
for (j in 1:mmax){
phiX[,2*j] = (sqrt(2)/p)*X%*%cos(2*pi*j*t)
phiX[,2*j+1] = (sqrt(2)/p)*X%*%sin(2*pi*j*t)
phi[2*j,] = sqrt(2)*cos(2*pi*j*t)
phi[2*j+1,] = sqrt(2)*sin(2*pi*j*t)
}
mmax = 100
Dmax = 2*mmax+1
p=49
t = seq(0,1,length.out = p)
phiX = matrix(NA,n,Dmax) # matrice contenant <X_i,phi_k>
phi = matrix(1,Dmax,p) # matrice contenant phi_k(t_l)
phiX[,1] = rowMeans(X)
for (j in 1:mmax){
phiX[,2*j] = (sqrt(2)/p)*X%*%cos(2*pi*j*t)
phiX[,2*j+1] = (sqrt(2)/p)*X%*%sin(2*pi*j*t)
phi[2*j,] = sqrt(2)*cos(2*pi*j*t)
phi[2*j+1,] = sqrt(2)*sin(2*pi*j*t)
}
mmax = 100
Dmax = 2*mmax+1
p=49
t = seq(0,1,length.out = p)
phiX = matrix(NA,n,Dmax) # matrice contenant <X_i,phi_k>
phi = matrix(1,Dmax,p) # matrice contenant phi_k(t_l)
phiX[,1] = rowMeans(X)
for (j in 1:mmax){
phiX[,2*j] = (sqrt(2)/p)*X%*%cos(2*pi*j*t)
phiX[,2*j+1] = (sqrt(2)/p)*X%*%sin(2*pi*j*t)
phi[2*j,] = sqrt(2)*cos(2*pi*j*t)
phi[2*j+1,] = sqrt(2)*sin(2*pi*j*t)
}
cos(2*pi*5*t)
View(Xnc)
mmax = 100
Dmax = 2*mmax+1
p=193
t = seq(0,1,length.out = p)
phiX = matrix(NA,n,Dmax) # matrice contenant <X_i,phi_k>
phi = matrix(1,Dmax,p) # matrice contenant phi_k(t_l)
phiX[,1] = rowMeans(X)
for (j in 1:mmax){
phiX[,2*j] = (sqrt(2)/p)*X%*%cos(2*pi*j*t)
phiX[,2*j+1] = (sqrt(2)/p)*X%*%sin(2*pi*j*t)
phi[2*j,] = sqrt(2)*cos(2*pi*j*t)
phi[2*j+1,] = sqrt(2)*sin(2*pi*j*t)
}
n=49
mmax = 100
Dmax = 2*mmax+1
p=193
t = seq(0,1,length.out = p)
phiX = matrix(NA,n,Dmax) # matrice contenant <X_i,phi_k>
phi = matrix(1,Dmax,p) # matrice contenant phi_k(t_l)
phiX[,1] = rowMeans(X)
for (j in 1:mmax){
phiX[,2*j] = (sqrt(2)/p)*X%*%cos(2*pi*j*t)
phiX[,2*j+1] = (sqrt(2)/p)*X%*%sin(2*pi*j*t)
phi[2*j,] = sqrt(2)*cos(2*pi*j*t)
phi[2*j+1,] = sqrt(2)*sin(2*pi*j*t)
}
G = crossprod(phiX)/n
hatb = crossprod(phiX,Y1)/n
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:Dmax){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
n=49
mmax = 100
Dmax = 2*mmax+1
p=193
t = seq(0,1,length.out = p)
phiX = matrix(NA,n,Dmax) # matrice contenant <X_i,phi_k>
phi = matrix(1,Dmax,p) # matrice contenant phi_k(t_l)
phiX[,1] = rowMeans(X)
for (j in 1:mmax){
phiX[,2*j] = (sqrt(2)/p)*X%*%cos(2*pi*j*t)
phiX[,2*j+1] = (sqrt(2)/p)*X%*%sin(2*pi*j*t)
phi[2*j,] = sqrt(2)*cos(2*pi*j*t)
phi[2*j+1,] = sqrt(2)*sin(2*pi*j*t)
}
G = crossprod(phiX)/n
hatb = crossprod(phiX,Y1)/n
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:Dmax){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
View(G)
View(hatb)
View(hatbetam)
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:Dmax){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:100){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:50){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:10){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:Dmax)/n))
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:20){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:Dmax)/n))
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:30){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:Dmax)/n))
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:40){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:Dmax)/n))
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:49){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
kappa = 2.5
gamma = rep(0,Dmax)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:Dmax)/n))
hatm2 = which.min(gamma*(1+kappa*(1:Dmax)/n))
kappa = 2.5
gamma = rep(0,48)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:Dmax)/n))
gamma
kappa = 5
gamma = rep(0,49)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:Dmax)/n))
gamma
kappa = 5
gamma = rep(0,49)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:48)/n))
kappa = 5
gamma = rep(0,49)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:48)/n))
kappa = 5
gamma = rep(0,48)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:48)/n))
kappa = 20
gamma = rep(0,48)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:48)/n))
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:Dmax)/n),col='orange',type='l')
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:48)/n),col='orange',type='l')
kappa = 100
gamma = rep(0,48)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:48)/n))
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:48)/n),col='orange',type='l')
kappa = 5
gamma = rep(0,48)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:48)/n))
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:48)/n),col='orange',type='l')
kappa = 100
gamma = rep(0,48)
for (m in 1:48){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:48)/n))
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:48)/n),col='orange',type='l')
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*kappa*(1:48)/n),col='orange',type='l')
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*kappa*(1:48)/n,col='orange',type='l')
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:48)/n),col='orange',type='l')
kappa = 5
gamma = rep(0,10)
for (m in 1:10){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:10)/n))
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:10)/n),col='orange',type='l')
kappa = 10
gamma = rep(0,10)
for (m in 1:10){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:10)/n))
kappa = 20
gamma = rep(0,10)
for (m in 1:10){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:10)/n))
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:10)/n),col='orange',type='l')
kappa = 30
gamma = rep(0,10)
for (m in 1:10){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
hatm2 = which.min(gamma*(1+kappa*(1:10)/n))
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:10)/n),col='orange',type='l')
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=1/p*X%*%hatbetahatm2
X%*%hatbetahatm2
y_hat=1/p*crossprod(X,hatbetahatm2)
View(phi)
View(phi)
View(phi)
y_hat=1/p*t(X)%*%hatbetahatm2
y_hat=X%*%hatbetahatm2
len(cos(2*t))
dim(cos(t))
length(cos(2*t))
length(hatbetahatm2)
y_hat=X%*%hatbetahatm2[1]
hatbetahatm2[1]
hatbetahatm2
View(hatbetahatm2)
y_hat=X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
erreur
hatm2=12
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
erreur
hatm2=3
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
erreur
hatm2=3
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=sum(abs(erreur))
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=sum(abs(erreur))
erreur
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
RMSE
hatm2=12
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
RMSE
hatm2=48
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
RMSE
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(rsample)
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(rsample)
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(dplyr)
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(dplyr)
data=as.data.frame(X)
data_train=sample_frac(X,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
library(dplyr)
data=as.data.frame(X)
data_train=sample_frac(data,0.8) #On tire au sort 80% de notre jeu de données qui va dans le train#
data_test=anti_join(X,data_train)
n=49
mmax = 100
Dmax = 2*mmax+1
p=193
t = seq(0,1,length.out = p)
phiX = matrix(NA,n,Dmax) # matrice contenant <X_i,phi_k>
phi = matrix(1,Dmax,p) # matrice contenant phi_k(t_l)
phiX[,1] = rowMeans(X)
for (j in 1:mmax){
phiX[,2*j] = (sqrt(2)/p)*X%*%cos(2*pi*j*t)
phiX[,2*j+1] = (sqrt(2)/p)*X%*%sin(2*pi*j*t)
phi[2*j,] = sqrt(2)*cos(2*pi*j*t)
phi[2*j+1,] = sqrt(2)*sin(2*pi*j*t)
}
G = crossprod(phiX)/n
hatb = crossprod(phiX,Y1)/n
kappa = 30
gamma = rep(0,10)
for (m in 1:10){
hatam = solve(G[1:m,1:m],hatb[1:m])
hatbetam = hatam%*%phi[1:m,]
gamma[m] = mean((Y1-tcrossprod(X,hatbetam)/p)^2)
}
plot(gamma,col='blue',type='b',pch=16,xlab='m',ylab='crit(m)')
points(gamma*(1+kappa*(1:10)/n),col='orange',type='l')
hatm2=48
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
hatm2=3
hatahatm2 = solve(G[1:hatm2,1:hatm2],hatb[1:hatm2])
hatbetahatm2 = hatahatm2%*%phi[1:hatm2,]
y_hat=1/p*X%*%as.numeric(hatbetahatm2)
erreur=Y1-y_hat
RMSE=1/n*sum(abs(erreur))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
p = 400
x = matrix(0,p,p)
x[150:250,150:250] = 1
grid = seq(0,1,length=p)
image(grid,grid,x,main='Image originale')
image(grid,grid,y,main='Image dégradée')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages(OpenImageR)
install.packages("OpenImageR)
install.packages("OpenImageR")
install.packages("OpenImageR")
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages('tiff')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
h<- matrix(1, 10, 10) / 100
library(tiff)
h<- matrix(1, 10, 10) / 100
y = convolution(x,h)
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages('tiff')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
install.packages('tiff')
install.packages('tiff')
h<- matrix(1, 10, 10) / 100
library(OpenImageR)
y = convolution(x,h)
image(grid,grid,y,main='Image dégradée')
install.packages(‘RcppArmadillo’)
install.packages(‘RcppArmadillo’)
install.packages("RcppArmadillo")
# ajout d'un bruit blanc
sigma2 = 0.01
y = convolution(x,h) + matrix(rnorm(p^2,0,sqrt(sigma2)),p,p)
image(grid,grid,y,main="Image dégradée et bruitée")
matrix(1, 10, 10) / 100
hatY = fft(y)
h<- matrix(0, p,p)
h[1:10,1:10]  = 1/100
H = fft(h)
hatx = fft(hatY/H,inverse=T)
hatx[1:3,1:3]
hatY/H
landa=5
hat2x=fft((hatY*H-landa)/H**2)
hat2x
lambda1 = sigma2*p^2/sum(Mod(H1)^2)
rm(list=ls())
library(tidyverse)
library(lme4) # lmer(): To fit mixed-model
library(lmerTest) # lmer (): To fit mixed-model and diplay p-values
library(nlme) # To fit mixed-model
library(lattice) # To plot mixed-model
library(nlme)
library(plotly)
library(ggplot2)
library(Metrics)
library(gridExtra)
library(dplyr)
library(MASS)
library(Matrix)
library(tidyverse)
library(xgboost)
library(caret)
library(readxl)
theme_set(theme_bw())
set.seed(2023)
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
setwd("~/Desktop/Projet MLG/Projet-MLG")
train<-read.csv('train_maladie.csv', header = T, sep = ",",dec=".")
selected=c(1,5,27,38,40,17)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = score)) + facet_wrap(~ sujet, ncol=2)
selected=c(17)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = FF)) + facet_wrap(~ sujet, ncol=2)
selected=c(1,5,27,38,40,17)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = duree, y = FF.Abs)) + facet_wrap(~ sujet, ncol=2)
selected=c(1,5,27,38,40,17)
train %>% filter(sujet %in% selected) %>%
ggplot() + geom_point(aes(x = FF.Abs, y = score)) + facet_wrap(~ sujet, ncol=2)
